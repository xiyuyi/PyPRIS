#!/u/home/x/xiyuyi/.conda/envs/PyPRIS_env/bin/python

print("")
print("")
print("--------------------------------------------------------")
print("")
print("")
print("")
print("PyPRIS: [add some description]")
print("Developers: Xiyu Yi, Xingjia Wang @ UCLA, 2019")
print("PI: Shimon Weiss")
print("[some more description]")

import sys
sys.path.append("/u/home/a/alejandr/bin")
sys.path.append("/u/home/x/xiyuyi/bin")
from PyPRIS import *
import os
print("")
print("")
print("")
print("PyPRIS Continue!")
import warnings
warnings.filterwarnings("ignore")

# load the original ticket
ticket = get_ticket('./Go.pris_ticket')

# Get the latest saved linbreg filename


# put in the file folder where you saved all the linbreg objects.
# path = 'C:\\Users\\wxjpp\\Desktop\\PyPRIS-master\\saved_objects'
path = './saved_objects'

mxnames = []
objIter = []
# r=root, d=directories, f = files
for r, d, f in os.walk(path):
    for file in f:
        if file.endswith('SensingMx.file'):
            mxnames.append(file[0:-5])


mxName = mxnames[-1]

for r, d, f in os.walk(path):
    for file in f:
        if file.startswith(mxName[0:-9]):
            if not file.endswith('SensingMx.file'):
                objIter.append(int(file[len(mxName[0:-9]):-5]))


objName = mxName[0:-9] + str(max(objIter))

print("Loading LinBreg object from: ")
print(path)
print(mxName)            
print(objName)

# Load the previous saved LinBreg object
with open('{}/{}.file'.format(path, objName), "rb") as f:
    linbreg_ori = pickle.load(f) #the loaded object is a LinBreg object


linbreg = copy.deepcopy(linbreg_ori)

with open('{}/{}.file'.format(path, mxName), "rb") as s:
    linbreg.A = joblib.load(s)


# Create a PyPRIS object and initialize according to the loaded LinBreg object
pypris = PyPRIS()
pypris.current_candidates = linbreg.candidate_coords
pypris.current_candidates_intervals = linbreg.candidate_intervals
pypris.current_A = linbreg.A

linbreg_ori.A = 0
Iter = linbreg.PyPRIS_iter[4:]
print("---------------- PRIS refinement #" + str(Iter) + " ------------------")
linbreg.go()


# construct sensing matrix,
for PRIS_iter in np.arange(Iter,ticket.PRIS_iter_end):
    pypris.prep_for_new_refinement()
    pypris.refine_candidates(linbreg)
    pypris.generate_sensing_mx()
    # prepare the inner sparse recovery
    pypris.current_A = pypris.current_A / ticket.psf_norm_factor
    c = np.dot(pypris.observation.ravel(), pypris.current_A)
    c1 = np.min(c[0:-2])
    c2 = np.max(c[0:-2])
    bgv = c1 + (c2 - c1) * ticket.bg_scaling_coef
    pypris.current_A[:, -1] = bgv / np.sum(pypris.observation.ravel())  # the last column in A corresponds to the background component.
    linbreg = copy.deepcopy(linbreg_ori)
    linbreg.candidate_coords = pypris.current_candidates
    linbreg.candidate_intervals = pypris.current_candidates_intervals
    linbreg.A = pypris.current_A
    linbreg.b = pypris.observation.ravel()
    linbreg.PyPRIS_iter = "pris"+ str(PRIS_iter)
    linbreg.stopping_loghistpercdelres_thres -= PRIS_iter*2
    print("---------------- PRIS refinement #" + str(PRIS_iter) + " ------------------")
    # recover
    linbreg.get_ready()
    linbreg.go()
