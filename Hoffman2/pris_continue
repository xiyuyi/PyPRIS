#!/u/home/a/alejandr/.conda/envs/PyPRIS_env/bin/python
#!/u/home/x/xiyuyi/.conda/envs/PyPRIS_env/bin/python

print("")
print("")
print("--------------------------------------------------------")
print("")
print("")
print("")
print("PyPRIS: [add some description]")
print("Developers: Xiyu Yi, Xingjia Wang @ UCLA, 2019")
print("PI: Shimon Weiss")
print("[some more description]")

import sys
sys.path.append("/u/home/a/alejandr/bin")
sys.path.append("/u/home/x/xiyuyi/bin")
sys.path.append("G:\\DH_localization\\PyPRIS")
from PyPRIS import *
import os
print("")
print("")
print("")
import warnings
warnings.filterwarnings("ignore")

# load the original ticket
ticket = get_ticket('./Go.pris_ticket')
# prep the order according to the ticket
psf = io.imread(ticket.psf_path)
blur1 = io.imread(ticket.plane1_path)
blur2 = io.imread(ticket.plane2_path)
blur = np.concatenate([blur1, blur2],axis=0)
# define linbreg_ori
linbreg_ori = ticket.linbreg_alpha
linbreg_ori.obs_dim0 = blur.shape[0]
linbreg_ori.obs_dim1 = blur.shape[1]
linbreg_ori.PyPRIS_name = ticket.name
# prepare a observer for pypris. [from one candidate, to one observation]
# summon an observer from the ObserveStation (ObserveStation class) (Cheers~)
observer = ObserveStation()
"configure this observer with biplane observation specifics"
observer.observe_biplane_prep(psf, single_image_size = blur1.shape,
                           deltaz_plane1 = ticket.plane1_dz,
                           deltaz_plane2 = ticket.plane2_dz,
                           psfz0 = ticket.psfz0,
                           observer_debugger = ticket.observer_debugger,
                           observer_edge_padding = ticket.observer_edge_padding)
# Get the latest saved linbreg filename
# put in the file folder where you saved all the linbreg objects.
# path = 'C:\\Users\\wxjpp\\Desktop\\PyPRIS-master\\saved_objects'
path = './saved_objects'
mxnames = []
objIter = []
# r=root, d=directories, f = files
for r, d, f in os.walk(path):
    for file in f:
        if file.endswith('SensingMx.file'):
            mxnames.append(file[0:-5])

if len(mxnames) is not 0:
    print("PyPRIS Continue!")
    mxName = mxnames[-1]
    for r, d, f in os.walk(path):
        for file in f:
            if file.startswith(mxName[0:-9]):
                if not file.endswith('SensingMx.file'):
                    objIter.append(int(file[len(mxName[0:-9]):-5]))
    #
    #
    objName = mxName[0:-9] + str(max(objIter))
    #
    print("Loading LinBreg object from: ")
    print(path)
    print(mxName)
    print(objName)
    #
    # Load the previous saved LinBreg object
    with open('{}/{}.file'.format(path, objName), "rb") as f:
        linbreg = pickle.load(f) #the loaded object is a LinBreg object
    #
    #
    #
    with open('{}/{}.file'.format(path, mxName), "rb") as s:
        linbreg.A = joblib.load(s)
    #
    # Create a PyPRIS object and initialize according to the loaded LinBreg object
    # pypris = PyPRIS()
    # pypris.current_candidates = linbreg.candidate_coords
    # pypris.current_candidates_intervals = linbreg.candidate_intervals
    # pypris.current_A = linbreg.A
    # pypris.observation = blur.ravel()
    pypris = loadPyPRIS(path, 'PyPRIS_pris{}'.format(linbreg.PyPRIS_iter[4:]))
    # set a check mark for pypris:
    pypris.set_check_mark()
    # put the configured observer to the pypris to perform the tasks of 'observe_biplane'
    # when a pypris object observes, it is through the observer and it is
    # done with the observer's observe_biplane skill (skill = method).
    pypris.observe = observer.observe_biplane
    Iter = int(linbreg.PyPRIS_iter[4:])
    print("---------------- PRIS refinement #" + str(Iter) + " ------------------")
    linbreg.go()
else:
    print("PyPRIS Begin!")
    # condition a main linbreg object that carries the basic configurations.
    # for each PRIS iteration, a new linbreg object will be cloned from this one for its own task.
    # the purpose here is just to simplify the parameter configuration process.
    linbreg_ori = ticket.linbreg_alpha
    linbreg_ori.obs_dim0 = blur.shape[0]
    linbreg_ori.obs_dim1 = blur.shape[1]
    linbreg_ori.PyPRIS_name = ticket.name
    #
    # prepare a observer for pypris. [from one candidate, to one observation]
    # summon an observer from the ObserveStation (ObserveStation class) (Cheers~)
    observer = ObserveStation()
    "configure this observer with biplane observation specifics"
    observer.observe_biplane_prep(psf, single_image_size=blur1.shape,
                                  deltaz_plane1=ticket.plane1_dz,
                                  deltaz_plane2=ticket.plane2_dz,
                                  psfz0=ticket.psfz0,
                                  observer_debugger=ticket.observer_debugger,
                                  observer_edge_padding=ticket.observer_edge_padding)
    #
    # this observer will perform observation for the pypris object as seen below in the next section titled 'Initialize PyPRIS'.
    # get a PyPRIS object:
    pypris = PyPRIS()
    pypris.observation = blur.ravel()
    pypris.current_candidates_intervals = ticket.init_candidates_intervals  # initialize the first intervals of neighboring candidate voxels.
    #
    # decide candidates for the first PRIS iteration. PRIS #0:
    range_ind0 = np.arange(ticket.init_ax0_range[0], ticket.init_ax0_range[1], pypris.current_candidates_intervals[
        0])  # seems like for DH psf, use finnest intervals for the thickness dimension is better.
    range_ind1 = np.arange(ticket.init_ax1_range[0], ticket.init_ax1_range[1], pypris.current_candidates_intervals[1])
    range_ind2 = np.arange(ticket.init_ax2_range[0], ticket.init_ax2_range[1], pypris.current_candidates_intervals[2])
    #
    # initialize the first pool of candidates with the current candidate intervals.
    pypris.current_candidates = list()  # current pool of candidates.
    for i0 in range_ind0:
        for i1 in range_ind1:
            for i2 in range_ind2:
                pypris.current_candidates.append([i0, i1, i2])
    #
    # set a check mark for pypris:
    pypris.set_check_mark()
    pypris.save()
    # put the configured observer to the pypris to perform the tasks of 'observe_biplane'
    # when a pypris object observes, it is through the observer and it is
    # done with the observer's observe_biplane skill (skill = method).
    pypris.observe = observer.observe_biplane
    # pypris.show_attributes()
    # construct sensing matrix,
    pypris.generate_sensing_mx()
    # prepare the inner sparse recovery
    pypris.current_A = pypris.current_A / ticket.psf_norm_factor
    c = np.dot(pypris.observation.ravel(), pypris.current_A)
    c1 = np.min(c[0:-2])
    c2 = np.max(c[0:-2])
    bgv = c1 + (c2 - c1) * ticket.bg_scaling_coef
    pypris.current_A[:, -1] = bgv / np.sum(
        pypris.observation.ravel())  # the last column in A corresponds to the background component.
    #
    linbreg = copy.deepcopy(linbreg_ori)
    linbreg.candidate_coords = pypris.current_candidates
    linbreg.candidate_intervals = pypris.current_candidates_intervals
    linbreg.A = pypris.current_A
    linbreg.b = pypris.observation.ravel()
    linbreg.PyPRIS_iter = "pris0"
    print("---------------- PRIS refinement #0 ------------------")
    # recover
    linbreg.get_ready()
    linbreg.go()
    Iter=0


# construct sensing matrix,
for PRIS_iter in np.arange(Iter + 1, ticket.PRIS_iter_end):
    pypris.prep_for_new_refinement()
    pypris.expansion = ticket.expansion
    pypris.refine_candidates(linbreg)
    pypris.current_PRIS_ItN += 1
    pypris.save()
    # put the configured observer to the pypris to perform the tasks of 'observe_biplane'
    # when a pypris object observes, it is through the observer and it is
    # done with the observer's observe_biplane skill (skill = method).
    pypris.observe = observer.observe_biplane
    pypris.generate_sensing_mx()
    # prepare the inner sparse recovery
    pypris.current_A = pypris.current_A / ticket.psf_norm_factor
    c = np.dot(pypris.observation.ravel(), pypris.current_A)
    c1 = np.min(c[0:-2])
    c2 = np.max(c[0:-2])
    bgv = c1 + (c2 - c1) * ticket.bg_scaling_coef
    pypris.current_A[:, -1] = bgv / np.sum(pypris.observation.ravel())  # the last column in A corresponds to the background component.
    linbreg = copy.deepcopy(linbreg_ori)
    linbreg.candidate_coords = pypris.current_candidates
    linbreg.candidate_intervals = pypris.current_candidates_intervals
    linbreg.A = pypris.current_A
    linbreg.b = pypris.observation.ravel()
    linbreg.PyPRIS_iter = "pris"+ str(PRIS_iter)
    #linbreg.stopping_loghistpercdelres_thres -= PRIS_iter
    linbreg.alpha = linbreg_ori.alpha/PRIS_iter
    print("---------------- PRIS refinement #" + str(PRIS_iter) + " ------------------")
    # recover
    linbreg.get_ready()
    linbreg.go()
